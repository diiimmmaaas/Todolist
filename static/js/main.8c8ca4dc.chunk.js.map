{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","isLoggenIn","rejectWithValue","errors","fieldsErrors","undefined","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasks","tasks","items","removeTaskTC","addTaskTC","task","item","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","updateTaskAC","catch","console","warn","addTaskAC","todoListId","forEach","tasksReducer","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","type","match","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c8ca4dc.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7cffbd42-f90e-47ce-a60b-e74b78a84e14'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>( `/auth/login`, data )\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{data: {}}>>(`/auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{data: AuthMeParamsType}>>(`/auth/me`)\r\n    },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeParamsType = {\r\n    id: number ,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { AxiosError } from \"axios\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk<{isLoggenIn: boolean}, LoginParamsType, {\r\n    rejectValue: {errors: Array<string>, fieldsErrors?: Array<FieldErrorType>}\r\n}>(\"auth/login\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n            return {isLoggenIn: true};\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n\r\n});\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggenIn;\r\n        });\r\n    }\r\n});\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC;\r\n\r\n\r\n// thunks\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}));\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch);\r\n        });\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport type initialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n             state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC, setIsInitializedAC} = slice.actions\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n// thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > 1) {\r\n                state.splice(index, 1);\r\n            }\r\n            // state.filter(tl => tl.id !== action.payload.id)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"});\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}));\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions;\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}));\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            });\r\n    };\r\n};\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: \"loading\"}));\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC({id: todolistId}));\r\n                    //скажем глобально приложению, что асинхронная операция завершена\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            });\r\n    };\r\n};\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}));\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            });\r\n    };\r\n};\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC({id, title}));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            });\r\n    };\r\n};\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC, setTodolistsAC,\r\n} from \"./todolists-reducer\";\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId);\r\n        const tasks = res.data.items;\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n        return {tasks, todolistId};\r\n    } catch (error: any) {\r\n\r\n    }\r\n});\r\n\r\nexport const removeTaskTC = createAsyncThunk(\"tasks/removeTask\", async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId);\r\n    return {taskId: param.taskId, todolistId: param.todolistId};\r\n});\r\n\r\nexport const addTaskTC = createAsyncThunk(\"tasks/addTask\", async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title);\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item;\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n            return {task};\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n    }\r\n});\r\n\r\n\r\n// thunks\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId);\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        console.warn(\"task not found in the state\");\r\n        return;\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...domainModel\r\n    };\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = updateTaskAC({taskId, model: domainModel, todolistId});\r\n                dispatch(action);\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        });\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        // removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n        //     const tasks = state[action.payload.todolistId];\r\n        //     const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n        //     if (index > -1) {\r\n        //         tasks.splice(index, 1);\r\n        //     }\r\n        // },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model};\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = [];\r\n            });\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todolistId] = action.payload.tasks;\r\n            }\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1);\r\n                }\r\n            }\r\n\r\n        });\r\n        // builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n        //     state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        // });\r\n    }\r\n});\r\n\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {updateTaskAC} = slice.actions;\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasks} from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id);\r\n        dispatch(thunk);\r\n    }, [demo, dispatch, props.todolist.id]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props]);\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    };\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title);\r\n    }, [props]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color={\"inherit\"}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color={\"primary\"}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={\"secondary\"}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>;\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport { authReducer } from '../features/Login/authReducer';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {loginTC} from \"./authReducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password must be more 3 symbols\";\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            // @ts-ignore\r\n            const action = await dispatch(loginTC(values));\r\n            // @ts-ignore\r\n            if (loginTC.rejected.type.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>;\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={\"center\"}>\r\n        <Grid item justifyContent={\"center\"}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={\"https://social-network.samuraijs.com/\"}\r\n                               target={\"_blank\"}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   type=\"email\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n\r\n                        />\r\n                        {formik.touched && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={\"Remember me\"} control={\r\n                            <Checkbox name=\"rememberMe\"\r\n                                      onChange={formik.handleChange}\r\n                                      checked={formik.values.rememberMe}/>}/>\r\n                        <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>;\r\n};\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport { logoutTC } from '../features/Login/authReducer'\r\n\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>( state => state.app.isInitialized )\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.auth.isLoggedIn )\r\n\r\n    useEffect( () => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch] )\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn &&  <Button onClick={onClickHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}